/*
 * PaypalMergedAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.paypal.sandbox.apim.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.paypal.sandbox.apim.ApiHelper;
import com.paypal.sandbox.apim.Server;
import com.paypal.sandbox.apim.exceptions.ApiException;
import com.paypal.sandbox.apim.exceptions.M500ErrorErrorException;
import com.paypal.sandbox.apim.exceptions.OrdersTrackersPatchResponse400JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersTrackersPatchResponse403JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersTrackersPatchResponse404JsonException;
import com.paypal.sandbox.apim.exceptions.OrdersTrackersPatchResponse422JsonException;
import com.paypal.sandbox.apim.http.request.HttpMethod;
import com.paypal.sandbox.apim.models.Patch;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class TrackersController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public TrackersController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes
     * or
     * objects:&lt;br/&gt;&lt;br/&gt;&lt;table&gt;&lt;thead&gt;&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Op&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;items&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;Using
     * replace op for &lt;code&gt;items&lt;/code&gt; will replace the entire &lt;code&gt;items&lt;/code&gt; object with the
     * value sent in request.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;notify_payer&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;status&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;Only patching
     * status to CANCELLED is currently supported.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  trackerId  Required parameter: The order tracking ID.
     * @param  body  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void ordersTrackersPatch(
            final String id,
            final String trackerId,
            final List<Patch> body) throws ApiException, IOException {
        prepareOrdersTrackersPatchRequest(id, trackerId, body).execute();
    }

    /**
     * Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes
     * or
     * objects:&lt;br/&gt;&lt;br/&gt;&lt;table&gt;&lt;thead&gt;&lt;th&gt;Attribute&lt;/th&gt;&lt;th&gt;Op&lt;/th&gt;&lt;th&gt;Notes&lt;/th&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;items&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;Using
     * replace op for &lt;code&gt;items&lt;/code&gt; will replace the entire &lt;code&gt;items&lt;/code&gt; object with the
     * value sent in request.&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;notify_payer&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace,
     * add&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;status&lt;/code&gt;&lt;/td&gt;&lt;td&gt;replace&lt;/td&gt;&lt;td&gt;Only patching
     * status to CANCELLED is currently supported.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;.
     * @param  id  Required parameter: The ID of the order for which to update payment details.
     * @param  trackerId  Required parameter: The order tracking ID.
     * @param  body  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> ordersTrackersPatchAsync(
            final String id,
            final String trackerId,
            final List<Patch> body) {
        try { 
            return prepareOrdersTrackersPatchRequest(id, trackerId, body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for ordersTrackersPatch.
     */
    private ApiCall<Void, ApiException> prepareOrdersTrackersPatchRequest(
            final String id,
            final String trackerId,
            final List<Patch> body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.ENUM_DEFAULT.value())
                        .path("/v2/checkout/orders/{id}/trackers/{tracker_id}")
                        .bodyParam(param -> param.value(body).isRequired(false))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .templateParam(param -> param.key("id").value(id)
                                .shouldEncode(true))
                        .templateParam(param -> param.key("tracker_id").value(trackerId)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .withAuth(auth -> auth
                                .add("Oauth2"))
                        .httpMethod(HttpMethod.PATCH))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Request is not well-formed, syntactically incorrect, or violates schema.",
                                (reason, context) -> new OrdersTrackersPatchResponse400JsonException(reason, context)))
                        .localErrorCase("403",
                                 ErrorCase.setReason("Authorization failed due to insufficient permissions.",
                                (reason, context) -> new OrdersTrackersPatchResponse403JsonException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("The specified resource does not exist.",
                                (reason, context) -> new OrdersTrackersPatchResponse404JsonException(reason, context)))
                        .localErrorCase("422",
                                 ErrorCase.setReason("The requested action could not be performed, semantically incorrect, or failed business validation.",
                                (reason, context) -> new OrdersTrackersPatchResponse422JsonException(reason, context)))
                        .localErrorCase("500",
                                 ErrorCase.setReason("An internal server error has occurred.",
                                (reason, context) -> new M500ErrorErrorException(reason, context)))
                        .localErrorCase(ErrorCase.DEFAULT,
                                 ErrorCase.setReason("The default response.",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}